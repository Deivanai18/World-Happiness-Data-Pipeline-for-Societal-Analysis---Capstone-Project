scala> val sixdf = spark.sql("select * from caps_proj.HWR2016")
Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.
23/09/21 02:41:47 WARN ObjectStore: Failed to get database global_temp, returning NoSuchObjectException
sixdf: org.apache.spark.sql.DataFrame = [country: string, region: string ... 11 more fields]

scala> sixdf.show
+-------------+--------------------+-----+------+-------------+---------------+-------+-------+-------+-------+-------+----------+-------+
|      country|              region|hrank|hscore|lowconfidence|upperconfidence|economy| family| health|freedom|  trust|generosity|     dr|
+-------------+--------------------+-----+------+-------------+---------------+-------+-------+-------+-------+-------+----------+-------+
|      Denmark|      Western Europe|    1| 7.526|         7.46|          7.592|1.44178|1.16374|0.79504|0.57941|0.44453|   0.36171|2.73939|
|  Switzerland|      Western Europe|    2| 7.509|        7.428|           7.59|1.52733|1.14524|0.86303|0.58557|0.41203|   0.28083|2.69463|
|      Iceland|      Western Europe|    3| 7.501|        7.333|          7.669|1.42666|1.18326|0.86733|0.56624|0.14975|   0.47678|2.83137|
|       Norway|      Western Europe|    4| 7.498|        7.421|          7.575|1.57744| 1.1269|0.79579|0.59609|0.35776|   0.37895|2.66465|
|      Finland|      Western Europe|    5| 7.413|        7.351|          7.475|1.40598|1.13464|0.81091|0.57104|0.41004|   0.25492|2.82596|
|       Canada|       North America|    6| 7.404|        7.335|          7.473|1.44015| 1.0961| 0.8276| 0.5737|0.31329|   0.44834|2.70485|
|  Netherlands|      Western Europe|    7| 7.339|        7.284|          7.394|1.46468|1.02912|0.81231|0.55211|0.29927|   0.47416|2.70749|
|  New Zealand|Australia and New...|    8| 7.334|        7.264|          7.404|1.36066|1.17278|0.83096|0.58147|0.41904|   0.49401|2.47553|
|    Australia|Australia and New...|    9| 7.313|        7.241|          7.385|1.44443|1.10476| 0.8512|0.56837|0.32331|   0.47407| 2.5465|
|       Sweden|      Western Europe|   10| 7.291|        7.227|          7.355|1.45181|1.08764|0.83121|0.58218|0.40867|   0.38254|2.54734|
|       Israel|Middle East and N...|   11| 7.267|        7.199|          7.335|1.33766|0.99537|0.84917|0.36432|0.08728|   0.32288|3.31029|
|      Austria|      Western Europe|   12| 7.119|        7.045|          7.193|1.45038|1.08383|0.80565|0.54355|0.21348|   0.32865|2.69343|
|United States|       North America|   13| 7.104|         7.02|          7.188|1.50796|1.04782|  0.779|0.48163|0.14868|   0.41077|2.72782|
|   Costa Rica|Latin America and...|   14| 7.087|        6.999|          7.175|1.06879|1.02152|0.76146|0.55225|0.10547|   0.22553|3.35168|
|  Puerto Rico|Latin America and...|   15| 7.039|        6.794|          7.284|1.35943|1.08113|0.77758|0.46823|0.12275|   0.22202| 3.0076|
|      Germany|      Western Europe|   16| 6.994|         6.93|          7.058|1.44787|1.09774|0.81487|0.53466|0.28551|   0.30452|2.50931|
|       Brazil|Latin America and...|   17| 6.952|        6.875|          7.029|1.08754|1.03938|0.61415|0.40425|0.14166|   0.15776|3.50733|
|      Belgium|      Western Europe|   18| 6.929|        6.861|          6.997|1.42539|1.05249|0.81959|0.51354|0.26248|    0.2424|2.61355|
|      Ireland|      Western Europe|   19| 6.907|        6.836|          6.978|1.48341|1.16157|0.81455|0.54008|0.29754|   0.44963|2.15988|
|   Luxembourg|      Western Europe|   20| 6.871|        6.804|          6.938|1.69752|1.03999|0.84542| 0.5487|0.35329|   0.27571|2.11055|
+-------------+--------------------+-----+------+-------------+---------------+-------+-------+-------+-------+-------+----------+-------+
only showing top 20 rows

scala> val countsix = sixdf.count()
countsix: Long = 157                                                            

scala> println(s"count of rows:$countsix")
count of rows:157

scala> val nullcounts = sixdf.select(sixdf.columns.map(c => sum(col(c).isNull.cast("int")).alias(c)):_*)
nullcounts: org.apache.spark.sql.DataFrame = [country: bigint, region: bigint ... 11 more fields]

scala> nullcounts.show()
+-------+------+-----+------+-------------+---------------+-------+------+------+-------+-----+----------+---+
|country|region|hrank|hscore|lowconfidence|upperconfidence|economy|family|health|freedom|trust|generosity| dr|
+-------+------+-----+------+-------------+---------------+-------+------+------+-------+-----+----------+---+
|      0|     0|    0|     0|            0|              0|      0|     0|     0|      0|    0|         0|  0|
+-------+------+-----+------+-------------+---------------+-------+------+------+-------+-----+----------+---+

scala> val deduplicatedDF = sixdf.dropDuplicates()
deduplicatedDF: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [country: string, region: string ... 11 more fields]

scala> val cleanedDF = deduplicatedDF.na.drop()
cleanedDF: org.apache.spark.sql.DataFrame = [country: string, region: string ... 11 more fields]

scala> val numRows = cleanedDF.count()
numRows: Long = 157                                                             

scala> sixdf.printSchema()
root
 |-- country: string (nullable = true)
 |-- region: string (nullable = true)
 |-- hrank: integer (nullable = true)
 |-- hscore: float (nullable = true)
 |-- lowconfidence: float (nullable = true)
 |-- upperconfidence: float (nullable = true)
 |-- economy: float (nullable = true)
 |-- family: float (nullable = true)
 |-- health: float (nullable = true)
 |-- freedom: float (nullable = true)
 |-- trust: float (nullable = true)
 |-- generosity: float (nullable = true)
 |-- dr: float (nullable = true)

scala> val processedData = cleanedDF.withColumnRenamed("dr","DystopiaResidual") .withColumnRenamed("hrank","HappinessRank") .withColumnRenamed("hscore","HappinessScore")
processedData: org.apache.spark.sql.DataFrame = [country: string, region: string ... 11 more fields]

scala> processedData.printSchema()
root
 |-- country: string (nullable = true)
 |-- region: string (nullable = true)
 |-- HappinessRank: integer (nullable = true)
 |-- HappinessScore: float (nullable = true)
 |-- lowconfidence: float (nullable = true)
 |-- upperconfidence: float (nullable = true)
 |-- economy: float (nullable = true)
 |-- family: float (nullable = true)
 |-- health: float (nullable = true)
 |-- freedom: float (nullable = true)
 |-- trust: float (nullable = true)
 |-- generosity: float (nullable = true)
 |-- DystopiaResidual: float (nullable = true)
 
scala> processedData.write .mode("overwrite") .saveAsTable("caps_proj.ProcessedHWR2016")

